from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from app.rag.pipeline import RAGPipeline
import os
import json

app = FastAPI(title="Product-Query Bot")
pipeline = RAGPipeline()

# Load product documents from JSON file
# This file contains a list of product descriptions
# Used to build the vector index for retrieval

data_path = os.path.join("docs", "products.json")
with open(data_path, "r", encoding="utf-8") as f:
    documents = json.load(f)

# Index the product documents at startup
pipeline.index_documents(documents)

class QueryRequest(BaseModel):
    """
    Request model for the /query endpoint.
    Contains user_id and the user's query string.
    """
    user_id: str
    query: str

@app.post("/query")
def query_endpoint(request: QueryRequest):
    """
    Endpoint to handle user queries.
    Returns an answer generated by the RAG pipeline.
    """
    if not request.query.strip():
        raise HTTPException(status_code=400, detail="Query cannot be empty.")
    answer = pipeline.query(request.user_id, request.query)
    return {"user_id": request.user_id, "answer": answer}
